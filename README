PROJECT 3 README
----------------------------------------------------------------------------------------------------------------

SCHOOL:
--------------
	Iowa State University

COURSE:
--------------
	Computer Science 229

INSTRUCTOR:
---------------------
	 Yan-Bin Jia

PROJECT:
---------------
	Project 3

AUTHOR:
--------------
	Ryan K Sanders

DATE:
---------
	Friday, October 28, 2011

NOTES:
-----------
- Please be sure to read 'KNOWN BUGS' and 'HEURISTIC SWITCHES' below
- This program was developed and debugged in Visual Studio 2010

DESCRIPTION:
----------------------
	Solves 8-puzzles given via user input  using the A* path finding using 3 different type of heuristics.

HOW TO COMPILE AND RUN PROJECT 3:
---------------------------------------------------------------

NOTE: The following steps assume you have a C++ compiler installed on
your machine.

1.)
Unzip the file Sanders_Ryan_Project3.zip

2.)
Place the files 'Makefile','proj3.cpp', '8-puzzle.h', and '8-puzzle.cpp' in a directory that is accessible by your C++ compiler.

3.)
Go to that directory using your terminal and type 'make' then press enter.

4.)
The program should compile on its own with no errors.

5.)
To run the program, type './proj3.exe' and press enter.

6.)
The program should now be running

7.)
When prompted, an inital 8-puzzle state.

8.)
Press enter.

9.)
The program should run with no errors.  You will first see your inital state solved using h1, then solved again using h2, then solved again using h3.

10.) The program will then go to step 9 again unless you type the character 'E' which will end the program.

HEURISTIC SWITCHES
-----------------------------------
	You can controll what heuristic functions are called during the execution of the prog3.exe
	There are three bools near the top of proj3.cpp
	
	Set one of the following (in the proj3.cpp file--not here) to false if you do not want that heuristic function to printout.
	bool RUN_H1 = true;
	bool RUN_H2 = true;
	bool RUN_H3 = true;
	
	When you change be sure to recompile!

INPUT: 
---------- 
	- Must be spaced and contain 9 integers. 
	- The 'space' in the puzzle must be entered as '0'
	- EXAMPLE: 4 1 2 3 5 0 8 6 7
	
KNOWN BUGS:
-----------------------
1.) 
	When using Visual studio the print of the moves, "UP", "DOWN", "LEFT"... all print out correctly.  However on Popeye and Pyrite the values are not write perhaps only printing out "UP" or only printing out "DOWN", ect.

2.)
	The puzzle:
		4 1 2
		3 5 0
		8 6 7
	Can be solved using h1 and h2 and possiably h3 but the program seems to get stuck in a loop on h3.  You can turn off the printout of h3 (or h1 or h2 for that matter).  See HEURISTIC SWITCHES.

		